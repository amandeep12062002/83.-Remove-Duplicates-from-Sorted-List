83. Remove Duplicates from Sorted List
Solved
Easy
Topics
Companies

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:

Input: head = [1,1,2]
Output: [1,2]

Example 2:

Input: head = [1,1,2,3,3]
Output: [1,2,3]

 

Constraints:

    The number of nodes in the list is in the range [0, 300].
    -100 <= Node.val <= 100
    The list is guaranteed to be sorted in ascending order.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        // Edge case: if the list is empty, return nullptr
        if (head == nullptr) {
            return nullptr;
        }
        
        // Initialize a pointer to traverse the list
        ListNode* current = head;
        
        // Traverse the list until we reach the end
        while (current != nullptr && current->next != nullptr) {
            // If the current node and the next node have the same value, skip the next node
            if (current->val == current->next->val) {
                current->next = current->next->next;  // Skip the duplicate
            } else {
                current = current->next;  // Move to the next node if no duplicate
            }
        }
        
        // Return the head of the modified list
        return head;
    }
};
